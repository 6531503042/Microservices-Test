name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [registry-service, user-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build with Maven
        id: maven-build
        run: |
          mvn clean install -f ${{ matrix.service }}/pom.xml
        continue-on-error: true

      - name: Check if build was successful
        id: check_build
        run: |
          if [ -d "${{ matrix.service }}/target" ] && ls ${{ matrix.service }}/target/*.jar 1> /dev/null 2>&1; then
            echo "Build successful for ${{ matrix.service }}"
            echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Build failed for ${{ matrix.service }}"
            echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi

      - name: Package application
        if: env.BUILD_SUCCESS == 'true'
        run: mvn package -f ${{ matrix.service }}/pom.xml

      - name: List files in target directory
        if: env.BUILD_SUCCESS == 'true'
        run: ls -al ${{ matrix.service }}/target/

      - name: Upload JAR file as artifact
        if: env.BUILD_SUCCESS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}
          path: ${{ matrix.service }}/target/*.jar

  build-image-docker:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: [registry-service, user-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR file artifact
        if: needs.build.outputs.BUILD_SUCCESS == 'true'
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service }}
          path: ${{ matrix.service }}/target/

      - name: List files in service directory
        if: needs.build.outputs.BUILD_SUCCESS == 'true'
        run: ls -al ${{ matrix.service }}/target/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        if: needs.build.outputs.BUILD_SUCCESS == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service }}
          dockerfile: ${{ matrix.service }}/Dockerfile
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/microservices-test-${{ matrix.service }}:latest

      - name: Push Docker image to Docker Hub
        if: needs.build.outputs.BUILD_SUCCESS == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service }}
          dockerfile: ${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/microservices-test-${{ matrix.service }}:latest
